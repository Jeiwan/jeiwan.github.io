<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethereum on Going the distance</title>
    <link>https://jeiwan.net/tags/ethereum/</link>
    <description>Recent content in Ethereum on Going the distance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jeiwan.net/tags/ethereum/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming DeFi: Uniswap. Part 3</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswap-3/</link>
      <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswap-3/</guid>
      <description>Photo by carlos aranda on Unsplash
Introduction Here we are again building a clone of Uniswap V1! Our implementation is almost ready: we&amp;rsquo;ve implemented all core mechanics of Exchange contract, including pricing functions, swapping, LP-tokens, and fees. It looks like our clone is complete, however there&amp;rsquo;s a missing piece: Factory contract. Today, we&amp;rsquo;ll implement it and our Uniswap V1 clone will be done. However, this is not the end: in the next part we&amp;rsquo;ll be building Uniswap V2 and it&amp;rsquo;ll be not less interesting than V1!</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap. Part 2</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswap-2/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswap-2/</guid>
      <description>Photo by Susan Kuriakose on Unsplash
Introduction This is part two of my series on programming DeFi smart contracts. In the previous part, we learned about Uniswap and its core mechanics and started building an exchange contract. The contract can accept liquidity from users, calculate output amounts, and perform swaps.
Today, we&amp;rsquo;re going to finish Uniswap V1 implementation. While it won&amp;rsquo;t be a full copy of Uniswap V1, it&amp;rsquo;ll have all core features.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap. Part 1</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswap-1/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswap-1/</guid>
      <description>Photo by Piret Ilver on Unsplash
Introduction The best way to learn something is to teach others. Second best way to learn something is to do it yourself. I decided to combine the two ways and teach myself and you how to program DeFi services on Ethereum (and any other blockchains based on EVM â€“ Ethereum Virtual Machine).
Our main focus will be on how those services work, we&amp;rsquo;ll try to understand the economical mechanics that make them what they are (and they all based on economical mechanics).</description>
    </item>
    
  </channel>
</rss>
