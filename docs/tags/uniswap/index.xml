<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uniswap on Going the distance</title>
    <link>https://jeiwan.net/tags/uniswap/</link>
    <description>Recent content in Uniswap on Going the distance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jeiwan.net/tags/uniswap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Public Bug Report: Uniswap&#39;s SwapRouter doesn&#39;t refund unspent ETH in partial swaps</title>
      <link>https://jeiwan.net/posts/public-bug-report-uniswap-swaprouter/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/public-bug-report-uniswap-swaprouter/</guid>
      <description>In December 2022, I found a bug in Uniswap&amp;rsquo;s SwapRouter contract. The bug allows users to lose funds, while interacting with the contract in the standard way. You don&amp;rsquo;t really find critical and high severity bugs in projects like Uniswap, especially after they&amp;rsquo;ve run in production for several years. So I didn&amp;rsquo;t really had high expectations and I was sure I wouldn&amp;rsquo;t be awarded for the report. The bug looks real to me, and I wanted to figure out why would a project with high security standards leave it unfixed.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 4</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-4/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-4/</guid>
      <description>Photo by British Library on Unsplash
Introduction Welcome to the final part of this series! Yes, we&amp;rsquo;ve almost done implementing a Uniswap V2 clone from scratch, and today we&amp;rsquo;re going to fill missing gaps. There&amp;rsquo;s a lot of things to do, so let&amp;rsquo;s get straight to business.
 You can find full source code of this part here: source code, part 4.
 LP-tokens burning bug We&amp;rsquo;ll begin with finishing the Router contract.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 3</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-3/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-3/</guid>
      <description>Photo by C Dustin on Unsplash
Introduction Another month, another blog post! ðŸ™ˆ
So far, our UniswapV2 implementation had the most crucial part doneâ€“the pair contract. We haven&amp;rsquo;t yet implemented protocol fees (the fee Uniswap takes from each liquidity deposit) but we&amp;rsquo;ll do this a little bit later since this is not a critical part of the exchange.
Today, we&amp;rsquo;ll move forward and implement the factory contract, which serves as a registry of all deployed pair contracts.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 2</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-2/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-2/</guid>
      <description>Photo by Jon Cellier on Unsplash
Introduction Welcome back! Today we&amp;rsquo;ll add the core functionality to our clone of Uniswap V2â€“swapping. Decentralized tokens exchanging is what Uniswap was created for, and today we&amp;rsquo;ll see how it&amp;rsquo;s done. We&amp;rsquo;re still working on the core pair contract, which means that our implementation will be very low-level and minimal. There&amp;rsquo;s no convenient interface and we won&amp;rsquo;t even have price calculation at this point!</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 1</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-1/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-1/</guid>
      <description>Photo by Evangelos Mpikakis on Unsplash
Introduction Uniswap is a decentralized exchange running on the Ethereum blockchain. It&amp;rsquo;s fully automated, not managed, and decentralized. It has come through multiple iterations of development: first version was launched in November 2018; second versionâ€“in May 2020; and final, third, version was launched in March 2021.
In my previous series on Uniswap V1, I showed how to build it from scratch and explained its core mechanics.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap. Part 3</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswap-3/</link>
      <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswap-3/</guid>
      <description>Photo by carlos aranda on Unsplash
Introduction Here we are again building a clone of Uniswap V1! Our implementation is almost ready: we&amp;rsquo;ve implemented all core mechanics of Exchange contract, including pricing functions, swapping, LP-tokens, and fees. It looks like our clone is complete, however there&amp;rsquo;s a missing piece: Factory contract. Today, we&amp;rsquo;ll implement it and our Uniswap V1 clone will be done. However, this is not the end: in the next part we&amp;rsquo;ll be building Uniswap V2 and it&amp;rsquo;ll be not less interesting than V1!</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap. Part 2</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswap-2/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswap-2/</guid>
      <description>Photo by Susan Kuriakose on Unsplash
Introduction This is part two of my series on programming DeFi smart contracts. In the previous part, we learned about Uniswap and its core mechanics and started building an exchange contract. The contract can accept liquidity from users, calculate output amounts, and perform swaps.
Today, we&amp;rsquo;re going to finish Uniswap V1 implementation. While it won&amp;rsquo;t be a full copy of Uniswap V1, it&amp;rsquo;ll have all core features.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap. Part 1</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswap-1/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswap-1/</guid>
      <description>Photo by Piret Ilver on Unsplash
Introduction The best way to learn something is to teach others. Second best way to learn something is to do it yourself. I decided to combine the two ways and teach myself and you how to program DeFi services on Ethereum (and any other blockchains based on EVM â€“ Ethereum Virtual Machine).
Our main focus will be on how those services work, we&amp;rsquo;ll try to understand the economical mechanics that make them what they are (and they all based on economical mechanics).</description>
    </item>
    
  </channel>
</rss>
