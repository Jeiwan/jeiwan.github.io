<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solidity on Going the distance</title>
    <link>https://jeiwan.net/tags/solidity/</link>
    <description>Recent content in Solidity on Going the distance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jeiwan.net/tags/solidity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Evaluating DeFi Strategies Using Foundry</title>
      <link>https://jeiwan.net/posts/evaluating-defi-strategy-in-foundry/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/evaluating-defi-strategy-in-foundry/</guid>
      <description>Photo by Brett Jordan on Unsplash
Introduction Nowadays, the ecosystem of Ethereum is quite rich and complex. There are multitudes of DeFi applications: decentralized exchanges, staking protocols, money markets, yield farming vaults, derivatives, leverages, etc. As DeFi protocol evolve, they become more and more intertwined, allowing for new complex strategies.
In this article, I&amp;rsquo;ll show you how to program a custom DeFi strategy that interacts with several DeFi platforms to produce a leveraged position that earns passive income.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 3</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-3/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-3/</guid>
      <description>Photo by C Dustin on Unsplash
Introduction Another month, another blog post! ðŸ™ˆ
So far, our UniswapV2 implementation had the most crucial part doneâ€“the pair contract. We haven&amp;rsquo;t yet implemented protocol fees (the fee Uniswap takes from each liquidity deposit) but we&amp;rsquo;ll do this a little bit later since this is not a critical part of the exchange.
Today, we&amp;rsquo;ll move forward and implement the factory contract, which serves as a registry of all deployed pair contracts.</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 2</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-2/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-2/</guid>
      <description>Photo by Jon Cellier on Unsplash
Introduction Welcome back! Today we&amp;rsquo;ll add the core functionality to our clone of Uniswap V2â€“swapping. Decentralized tokens exchanging is what Uniswap was created for, and today we&amp;rsquo;ll see how it&amp;rsquo;s done. We&amp;rsquo;re still working on the core pair contract, which means that our implementation will be very low-level and minimal. There&amp;rsquo;s no convenient interface and we won&amp;rsquo;t even have price calculation at this point!</description>
    </item>
    
    <item>
      <title>Programming DeFi: Uniswap V2. Part 1</title>
      <link>https://jeiwan.net/posts/programming-defi-uniswapv2-1/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/programming-defi-uniswapv2-1/</guid>
      <description>Photo by Evangelos Mpikakis on Unsplash
Introduction Uniswap is a decenralized exchange running on the Ethereum blockchain. It&amp;rsquo;s fully automated, not managed, and decentralized. It has come through multiple iterations of development: first version was launched in November 2018; second versionâ€“in May 2020; and final, third, version was launched in March 2021.
In my previous series on Uniswap V1, I showed how to build it from scratch and explained its core mechanics.</description>
    </item>
    
    <item>
      <title>Ethernaut tips and solutions</title>
      <link>https://jeiwan.net/posts/ethernaut-tips-and-solutions/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/ethernaut-tips-and-solutions/</guid>
      <description>Photo by Jukan Tateisi on Unsplash
Introduction Ethernaut is an (awesome) browser game that let&amp;rsquo;s you practice Web3 and Solidity whilte solving different tasks. The game consists of 23 levels (as of August 2021) and each level is focused on some Solidity feature or bug, smart contract design flaw, or unexpected behaviour of a contract. Your goals in each level is to hack it: to find a way of becoming a contract owner, to transfer all tokens to your own address, or abuse a feature of Solidity that wasn&amp;rsquo;t taken into consideration by a smart contract developer.</description>
    </item>
    
    <item>
      <title>Upgradeable proxy contract from scratch</title>
      <link>https://jeiwan.net/posts/upgradeable-proxy-from-scratch/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeiwan.net/posts/upgradeable-proxy-from-scratch/</guid>
      <description>Photo by RafaÅ‚ NaczyÅ„ski on Unsplash
Immutability gives Ethereum a big benefit: once a smart contract is deployed, there&amp;rsquo;s no way to change it. This means that smart contract logic won&amp;rsquo;t change over time and it&amp;rsquo;ll remain as reliable as it was from the beginning, e.g. you won&amp;rsquo;t suddenly see a contract doing something no one thought it could do.
However, immutability comes with drawbacks that can be significant in some cases.</description>
    </item>
    
  </channel>
</rss>
